/**
 * Autogenerate typed query-, mutation- und subscription-operations.
 *
 * Access a query operation created by createQuery():
 *   `Queries.<OperationName>`
 *
 * Access a query operation created by createMutation():
 *   `Mutations.<OperationName>`
 *
 * Access a query operation created by createSubscription():
 *   `Subscriptions.<OperationName>`
 *
 * You can customize the logic and result types of the create*() functions which effects the autogenerated operations.
 *
 * The QueryFunction, MutationFunction and SubscribeFunction types and the create*() logic serve only as an example.
 */
import {DocumentNode} from 'graphql';
import {ApolloClient, ApolloQueryResult, MutationOptions, QueryOptions, SubscriptionOptions} from 'apollo-client';
import {FetchResult} from 'apollo-link';
import {Observable} from 'apollo-client/util/Observable';

export function createQuery<T, V>(documentNode: DocumentNode): QueryFunction<T, V> {
  return (client, options) => client.query<T, V>({ ...options, query: documentNode });
}

export function createMutation<T, V>(documentNode: DocumentNode): MutateFunction<T, V> {
  return (client, options) => client.mutate<T, V>({ ...options, mutation: documentNode });
}

export function createSubscription<T, V>(documentNode: DocumentNode): SubscribeFunction<T, V> {
  return (client, options) => client.subscribe<T, V>({ ...options, query: documentNode });
}

export type MutateFunction<Result, Variables> =
  (client: ApolloClient<any>,
   options: Omit<MutationOptions<Result, Variables>, 'mutation'>) => Promise<FetchResult<Result>>;

export type QueryFunction<Result, Variables> =
  (client: ApolloClient<any>, options: Omit<QueryOptions<Variables>, 'query'>) => Promise<ApolloQueryResult<Result>>;

export type SubscribeFunction<Result, Variables> =
  (client: ApolloClient<any>,
   options: Omit<SubscriptionOptions<Variables>, 'query'>) => Observable<FetchResult<Result>>;